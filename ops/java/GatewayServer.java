// On importe les classes n√©cessaires pour cr√©er un serveur HTTP basique
import com.sun.net.httpserver.HttpServer;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpExchange;

import java.io.IOException;       // G√©rer les erreurs d'entr√©e/sortie
import java.io.OutputStream;     // √âcrire la r√©ponse HTTP
import java.net.InetSocketAddress; // D√©finir l‚Äôadresse/port du serveur
import java.nio.file.Files;      // Lire les fichiers du disque
import java.nio.file.Path;       // Repr√©senter un chemin vers un fichier

public class GatewayServer {
    public static void main(String[] args) throws IOException {
        // On d√©marre un serveur HTTP qui √©coute sur le port 8080
        HttpServer server = HttpServer.create(new InetSocketAddress(8080), 0);

        // Toutes les routes "/" seront g√©r√©es par notre classe HtmlHandler
        server.createContext("/", new HtmlHandler());

        // Message dans la console pour confirmer que le serveur tourne
        System.out.println("üöÄ Java Gateway running on http://localhost:8080");

        // On d√©marre le serveur (boucle infinie tant qu‚Äôon ne l‚Äôarr√™te pas)
        server.start();
    }

   // Une classe interne statique qui impl√©mente une interface de Java.
   // Ici, HttpHandler est une INTERFACE : √ßa veut dire qu‚Äôelle d√©finit un contrat (m√©thode handle √† impl√©menter).
   static class HtmlHandler implements HttpHandler {

       // @Override est une ANNOTATION.
       // Elle dit au compilateur : "cette m√©thode red√©finit une m√©thode de l‚Äôinterface ou d‚Äôune classe parente".
       // Si tu te trompes dans la signature (ex: mauvais nom ou mauvais type), le compilateur l√®vera une erreur.
       @Override
       public void handle(HttpExchange exchange) throws IOException {
           // HttpExchange est une CLASSE fournie par com.sun.net.httpserver.
           // Elle encapsule TOUT ce qui concerne une requ√™te HTTP :
           //   - les headers re√ßus
           //   - le body de la requ√™te (si POST/PUT)
           //   - les infos de la r√©ponse (headers, code HTTP, body √† √©crire)

           // Exemple : ici on mesure le temps pour calculer la latence.
           long startTime = System.currentTimeMillis();

           // Path et Files sont des CLASSES utilitaires de java.nio.file
           // Path = repr√©sente un chemin vers un fichier
           // Files = classe utilitaire avec des m√©thodes statiques pour lire/√©crire
           Path indexPath = Path.of("ui/web/index.html");
           String baseHtml = Files.readString(indexPath);

           // Runtime est une CLASSE sp√©ciale en Java :
           // - Elle repr√©sente la JVM en cours d‚Äôex√©cution
           // - On y acc√®de par Singleton : Runtime.getRuntime()
           // Ici on s‚Äôen sert pour interroger la m√©moire :
           long latencyMs = System.currentTimeMillis() - startTime;
           long totalMemory = Runtime.getRuntime().totalMemory();
           long freeMemory = Runtime.getRuntime().freeMemory();
           long usedMemory = totalMemory - freeMemory;

           // On convertit en MB (en Java, les divisions d'entiers tronquent les d√©cimales ‚Üí attention √† √ßa).
           long usedMemoryMB = usedMemory / (1024 * 1024);

            // Charger les deux fichiers s√©par√©s
            String widgetContainer = Files.readString(Path.of("ui/web/widget-container.html"));
            String widgetScript = Files.readString(Path.of("ui/web/widget-script.html"));

            // Injecter le conteneur (dans le body)
            baseHtml = baseHtml.replace("</body>", widgetContainer + "</body>");

            // Puis injecter le script (juste avant </html>)
            widgetScript = widgetScript.replace("{{latency}}", String.valueOf(latencyMs))
                                       .replace("{{memory}}", String.valueOf(usedMemoryMB));

            String finalHtml = baseHtml.replace("</html>", widgetScript + "</html>");

           // exchange.getResponseHeaders() ‚Üí permet de modifier les HEADERS HTTP envoy√©s au client.
           // Ici on pr√©cise que c‚Äôest du HTML avec encodage UTF-8.
           exchange.getResponseHeaders().add("Content-Type", "text/html; charset=UTF-8");

           // exchange.sendResponseHeaders(statusCode, length) ‚Üí envoie le code HTTP (200 = OK)
           // et la taille du contenu qu‚Äôon va √©crire.
           exchange.sendResponseHeaders(200, finalHtml.getBytes().length);


           // OutputStream = flux de sortie pour √©crire la r√©ponse au client.
           try (OutputStream os = exchange.getResponseBody()) {
               os.write(finalHtml.getBytes());
           }
           // Ici on utilise try-with-resources ‚Üí √ßa ferme automatiquement le flux √† la fin.
           // C‚Äôest un m√©canisme introduit en Java 7 bas√© sur l‚Äôinterface AutoCloseable.
       }
   }

}
